#!/usr/bin/env bash

# TODO: Finish docs.

################################################################################
################################# DOCUMENTATION ################################
################################################################################
#
# NAME
#
#     setup-github-account - Generate SSH keys and authenticate with GitHub
#
# SYNOPSIS
#
#     setup-github-account [--category <category>] [--comment <comment>] [--email <email>]
#                          [--passphrase <passphrase>] [--base-dir <dirname>] [--gitconfig]
#                          [--allowed-signers] <account>
#
# DESCRIPTION
#
# OPTIONS
#     --category <category>

#     --comment <comment>

#     --passphrase <passphrase>

#     --base-dir <dirname>

#     --gitconfig
#         The script prints two blocks: ACCOUNT_GITCONFIG and INCLUDEIF_DIRECTIVE,
#         each wrapped in unique start/end markers:
#
#         >>> ACCOUNT_GITCONFIG
#         ... gitconfig block ...
#         <<< ACCOUNT_GITCONFIG
#
#         >>> INCLUDEIF_DIRECTIVE
#         ... includeIf block ...
#         <<< INCLUDEIF_DIRECTIVE
#
#         ACCOUNT_GITCONFIG is always generated.
#         INCLUDEIF_DIRECTIVE is only generated if `--base-dir` and `--email` are provided.
#
#         To extract blocks into separate files, use sed:
#
#           # Extract gitconfig block
#           setup-github-account --gitconfig |
#             sed -n '/^>>> ACCOUNT_GITCONFIG$/,/^<<< ACCOUNT_GITCONFIG$/p' |
#             sed '1d;$d' > gitconfig.out
#
#           # Extract includeIf block
#           setup-github-account --gitconfig --base_dir=<dirname> --email=<email> |
#             sed -n '/^>>> INCLUDEIF_DIRECTIVE$/,/^<<< INCLUDEIF_DIRECTIVE$/p' |
#             sed '1d;$d' > include.out
#
#         If you want to get both, it may be worth capturing the output then piping into sed separately:
#
#           data=$(setup-github-account --gitconfig --base_dir=<dirname> --email=<email>)
#
#           sed -n '/^>>> ACCOUNT_GITCONFIG$/,/^<<< ACCOUNT_GITCONFIG$/p' "$data" |
#             sed '1d;$d' > gitconfig.out
#
#           sed -n '/^>>> INCLUDEIF_DIRECTIVE$/,/^<<< INCLUDEIF_DIRECTIVE$/p' "$data" |
#             sed '1d;$d' > include.out
#
#         Of course you can also capture the sed output(s) in variables rather than files:
#
#           include_block=$(
#             sed -n '/^>>> INCLUDEIF_DIRECTIVE$/,/^<<< INCLUDEIF_DIRECTIVE$/p' "$data" |
#             sed '1d;$d'
#           )
#
#         This ensures the blocks are easily reusable and editable.
#
################################################################################
############################# ENF OF DOCUMENTATION #############################
################################################################################

set -Eeuo pipefail

# POSITIONAL ARGUMENTS
EXPECTED_ARGS=1

ARGS=()
ACCOUNT=""

# OPTION ARGUMENTS
CATEGORY=""
COMMENT=""
PASSPHRASE=""
BASE_DIR=""
EMAIL=""

# OPTION FLAGS
GIT_CONFIG=0
ALLOWED_SIGNERS=0

show_help() {
  cat <<-'EOF'
		Generate SSH keys, authenticate with GitHub via the CLI and (optionally) create
		a new directory for the account.

		Usage:
		  setup-github-account [--category <category>] [--comment <comment>] [--email <email>]
		                       [--passphrase <passphrase>] [--base-dir <dirname>] [--gitconfig]
		                       [--allowed-signers] <account>

		Arguments:
		  account         Name of GitHub account

		Option Arguments:
		  --category      Sub directory under ~/.ssh to store the SSH key pair (Default: "")
		  --comment       Comment for SSH key (Default: "$(whoami)@$(hostname -s):<account>@github:$(date +%Y-%m-%d)")
		  --passphrase    Passphrase for SSH key (Default: "")
		  --base-dir      Base directory under which the account directory will be created
		                  (the account name is automatically appended) (Default: "")
		  --email         Email associated with account, should be of the form 123456789+<account>@users.noreply.github.com
		                  This option is required if --allowed-signers AND/OR --gitconfig are provided

		Option Flags:
		  --gitconfig         Generate gitconfigs (prints ACCOUNT_GITCONFIG and INCLUDEIF_DIRECTIVE blocks)
		  --allowed-signers   Append entry to ~/.ssh/allowed_signers

		  -h, --help      Print this help message

		For more detailed documentation, consult the script file itself:
		  cat $(which setup-github-account)

		Examples:
		  setup-github-account john-smith
		      Creates ~/.ssh/github-john-smith{,.pub} with no comment and no passphrase

		  setup-github-account john-smith --category work
		      Creates ~/.ssh/work/github-john-smith{,.pub} with no comment and no
		      passphrase

		  setup-github-account john-smith --comment="john.smith@work.com" --passphrase "donkey"
		      Creates ~/.ssh/github-john-smith{,.pub} with the comment "john.smith@work.com"
		      as and passphrase "donkey"

		  setup-github-account john-smith --base-dir ~/work
		      Creates ~/.ssh/github-john-smith{,.pub} with no comment and no passphrase
		      and creates the directory ~/work/john-smith/ if it does not already exist.
	EOF
  exit 0
}

# Expands ~ to $HOME.
#
# Example:
#   VAR="~/go"
#   VAR=$(expand_path "$VAR")
expand_path() {
  local path="$1"
  [[ $path == "~"* ]] && path="${path/#\~/$HOME}"
  echo "$path"
}

unexpand_path() {
  local path="$1"
  path="${path/#$HOME/\~}"
  echo "$path"
}

check_requirements() {
  local required=(
    gh
    ssh-keygen
  )

  local missing=()

  for cmd in "${required[@]}"; do
    if ! command -v "$cmd" &>/dev/null; then
      local missing+=("$cmd")
    fi
  done

  if [[ ${#missing[@]} -ne 0 ]]; then
    echo "Error: the following required tools are missing:" >&2
    for cmd in "${missing[@]}"; do
      echo "  - $cmd" >&2
    done
    return 1
  fi
}

flag() {
  [[ $1 -eq 1 ]]
}

flag_arg() {
  [[ -n $1 ]]
}

parse_args() {

  require_arg() {
    local name="$1"
    local token="$2"
    local next="${3-}"
    local value=""

    # Handle --flag=value form.
    if [[ $token == *=* ]]; then
      value="${token#*=}"
    else
      # Handle --flag value form.
      value="$next"
    fi

    if [[ -z $value ]]; then
      echo "Error: $name requires a non-empty value" >&2
      return 1
    fi

    echo "$value"
  }

  while [[ $# -gt 0 ]]; do
    case $1 in

    # LONG OPTION ARGUMENTS

    --category | --category=*)
      CATEGORY=$(require_arg --category "$1" "${2-}") || return
      [[ $1 != *=* ]] && shift # Only shift extra if not --flag=value form.
      ;;

    --comment | --comment=*)
      COMMENT=$(require_arg --comment "$1" "${2-}") || return
      [[ $1 != *=* ]] && shift
      ;;

    --passphrase | --passphrase=*)
      PASSPHRASE=$(require_arg --passphrase "$1" "${2-}") || return
      [[ $1 != *=* ]] && shift
      ;;

    --base-dir | --base-dir=*)
      BASE_DIR=$(require_arg --base-dir "$1" "${2-}") || return
      [[ $1 != *=* ]] && shift
      ;;

    --email | --email=*)
      EMAIL=$(require_arg --email "$1" "${2-}") || return
      [[ $1 != *=* ]] && shift
      ;;

    # OPTIONS

    --gitconfig) GIT_CONFIG=1 ;;

    --allowed-signers) ALLOWED_SIGNERS=1 ;;

    -h | --help) show_help ;;

    -*)
      echo "Unexpected option: $1"
      return 1
      ;;

    # POSITIONAL ARGUMENTS

    *)
      ARGS+=("$1")
      ;;

    esac

    shift
  done

  if [[ ${#ARGS[@]} -lt $EXPECTED_ARGS ]]; then
    echo "Error: expected $((EXPECTED_ARGS - ${#ARGS[@]})) more argument(s)" >&2
    return 1
  fi

  if [[ ${#ARGS[@]} -gt $EXPECTED_ARGS ]]; then
    echo "Error: unexpected extra positional arguments: ${ARGS[*]:EXPECTED_ARGS}" >&2
    return 1
  fi

  # Set default values.
  ACCOUNT="${ARGS[0]:-}"
  BASE_DIR="$(expand_path "${BASE_DIR:-}")"

  # TODO: These probably aren't needed.
  CATEGORY="${CATEGORY:-}"
  COMMENT="${COMMENT-}"
  PASSPHRASE="${PASSPHRASE-}"

  if ! [[ $ACCOUNT =~ ^[a-zA-Z0-9][a-zA-Z0-9-]*$ ]]; then
    echo "Error: argument <account> may only start with an alphanumeric character and may only contain alphanumeric characters and hyphens" >&2
    return 1
  fi

  # `--email <email>` is required if `--gitconfig` is provided.
  if flag "$GIT_CONFIG"; then
    if ! flag_arg "$EMAIL"; then
      echo "Error: --email <email> is required when --gitconfig is provided" >&2
      return 1
    fi
  fi

  # `--email <email>` is required if `--allowed-signers` is provided.
  if flag "$ALLOWED_SIGNERS"; then
    if ! flag_arg "$EMAIL"; then
      echo "Error: --email <email> is required when --allowed-signers is provided" >&2
      return 1
    fi
  fi

  # Validate email.
  if ! [[ $EMAIL =~ ^[0-9]+\+${ACCOUNT}@users\.noreply\.github\.com$ ]]; then
    echo "Error: invalid GitHub email" >&2
    echo "Email should be of the form 123456789+<account>@users.noreply.github.com" >&2
    return 1
  fi

}

# TODO: Refactor this into multiple functions that take arguments instead of
# nested functions inheriting variables.
github_ssh_auth() {

  local ssh_location="$HOME/.ssh/${CATEGORY}"
  ssh_location=${ssh_location%/}

  local keyfile="$ssh_location/github-$ACCOUNT"

  local comment
  comment="$(whoami)@$(hostname -s):${ACCOUNT}@github:$(date +%Y-%m-%d)"

  mkdir -p "$ssh_location"

  generate_ssh_key() {
    ssh-keygen \
      -t ed25519 \
      -f "$keyfile" \
      -C "${COMMENT:-$comment}" \
      -N "$PASSPHRASE"
  }

  github_login() {
    gh auth login \
      --hostname github.com \
      --git-protocol ssh \
      --scopes "admin:public_key,admin:ssh_signing_key" \
      --skip-ssh-key \
      --web \
      --clipboard
  }

  github_add_ssh_key() {
    gh ssh-key add \
      "$keyfile.pub" \
      --title "$comment" \
      --type "${1}"
  }

  github_reset_scope() {
    gh auth refresh \
      --hostname github.com \
      --reset-scopes \
      --clipboard
  }

  generate_gitconfig() {
    unexpanded_keyfile="$(unexpand_path "$keyfile")"
    unexpanded_BASE_DIR="$(unexpand_path "$BASE_DIR")"

    # Tab indent. Required to start lines with <TAB> when using <<- heredoc.
    t=$'\t'

    # TODO: Maybe add quoting to all values?

    cat <<-EOF
			>>> ACCOUNT_GITCONFIG
			[user]
			${t}email      = "$EMAIL"
			${t}signingkey = $unexpanded_keyfile.pub

			[core]
			${t}sshCommand = ssh -i $unexpanded_keyfile -F /dev/null
			<<< ACCOUNT_GITCONFIG
		EOF

    if [[ -n $BASE_DIR ]]; then
      cat <<-EOF
				>>> INCLUDEIF_DIRECTIVE
				[includeIf "gitdir:$unexpanded_BASE_DIR/$ACCOUNT/"]
				${t}path =
				<<< INCLUDEIF_DIRECTIVE
			EOF
    fi
  }

  append_allowed_signers() {
    line="$EMAIL namespaces=\"git\" $(awk '{print $1, $2}' "$keyfile".pub)"
    allowed_signers_file="$HOME/.ssh/allowed_signers"

    # Only append line if it does not already exist.
    if ! [[ -f $allowed_signers_file ]] || ! grep -Fxq "$line" "$allowed_signers_file"; then
      echo "$line" | tee -a "$allowed_signers_file"
    else
      echo "$line"
    fi
  }

  generate_ssh_key
  github_login
  github_add_ssh_key authentication
  github_add_ssh_key signing
  github_reset_scope
  gh auth setup-git

  if flag_arg "$BASE_DIR"; then
    mkdir -p "$BASE_DIR/$ACCOUNT"
  fi

  if flag "$GIT_CONFIG"; then
    generate_gitconfig
  fi

  if flag "$ALLOWED_SIGNERS"; then
    append_allowed_signers
  fi

}

main() {
  check_requirements || exit

  parse_args "$@" || exit

  github_ssh_auth || exit
}

main "$@"
