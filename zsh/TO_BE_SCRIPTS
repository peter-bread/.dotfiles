#!/usr/bin/env bash

function neovim() {

  function _show_help() {
    title="\e[1;4m"
    reset="\e[0m"

    echo "Manage neovim status."
    echo
    echo "Usage: neovim <command>"
    echo
    echo -e "${title}Commands:${reset}"
    echo -e "  clear              Delete neovim runtime files"
    echo -e "  update             Update all plugins and mason tools"
    echo -e "  restore            Restore config to state of lazy-lock.json"
    echo -e "  refresh            Equivalent of 'neovim clear && neovim restore'"
    echo -e "  reset              Equivalent of 'neovim clear && neovim update'"
    echo -e "  switch <config>    Switch to different config"
    echo -e "  help               Show help"
    echo
    echo -e "${title}Options:${reset}"
    echo -e "  -h, --help   Show help"
  }

  function _clear() {
    rm -rf "${XDG_DATA_HOME:-$HOME/.local/share}/${NVIM_APPNAME:-nvim}"
    rm -rf "${XDG_STATE_HOME:-$HOME/.local/state}/${NVIM_APPNAME:-nvim}"
    rm -rf "${XDG_CACHE_HOME:-$HOME/.cache}/${NVIM_APPNAME:-nvim}"
  }

  function _update() {
    nvim --headless \
      '+Lazy! sync' \
      '+Lazy! load mason-tool-installer.nvim' \
      +qa
  }

  function _restore() {
    nvim --headless \
      '+Lazy! restore' \
      '+Lazy! load mason-tool-installer.nvim' \
      '+MasonToolsClean' \
      +qa
  }

  function _switch() {
    if [[ -z $1 ]]; then
      echo "Error: argument cannot be empty."
      echo "See 'neovim help'."
      return 1
    fi
    export NVIM_APPNAME="$1"
  }

  if [[ -z $1 ]]; then
    _show_help
    return 1
  fi

  case $1 in

  -h | --help | help)
    _show_help
    ;;

  clear)
    _clear
    return 0
    ;;

  update)
    _update
    ;;

  restore)
    _restore
    ;;

  refresh)
    _clear
    _restore
    ;;

  reset)
    _clear
    _update
    ;;

  switch)
    _switch "$2"
    ;;

  esac
}

# Create a file and any missing parent directories.
function newfile() {

  function _show_help() {
    title="\e[1;4m"
    reset="\e[0m"

    echo "Create files and any missing parent directories."
    echo
    echo "Usage: newfile <filepaths...>"
    echo
    echo -e "${title}Options:${reset}"
    echo -e "  -h, --help   Show help"
    echo
    echo -e "${title}Example:${reset}"
    echo "To create a file with full path, you can use:"
    echo -e "  \$ newfile ~/.config/someapp/config.yml"
    echo
    echo "This is the same as:"
    echo -e "  \$ mkdir -p ~/.config/someapp && touch ~/.config/someapp/config.yml"
  }

  [[ -z $1 ]] && _show_help && return 1

  [[ $1 == "-h" || $1 == "--help" ]] && _show_help && return 0

  for filepath in "$@"; do
    mkdir -p "$(dirname "$filepath")" && touch "$filepath"
  done
}

# Get summary of git repo
function summary() {

  commits="$(git rev-list --count HEAD)"
  structure="$(tree | tail -n 1)"

  echo "No. of commits: $commits"
  echo "File structure: $structure"

}
